// compile disclaimers
// compile with : g++
// IMPORTANT! THE FUNCTION RETURNS A TUPLE OF THE KEY AND PLAINTEXT
// CONTROL THE INPUTS FROM THE MAIN, OR IMPORT THE CLASS
// OR YOU CAN USE THE printKeyAndText FUNCTION


#include <iostream>
#include <bits/stdc++.h>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <limits>
#include <cctype>
#include <tuple>

using namespace std;

class vigenere_crack {
    // vector<vector<int>> bigram = { german
    //     // A       B       C       D       E       F       G       H       I       J       K       L       M       N       O       P       Q       R       S       T       U       V       W       X       Y       Z
    //     { 667643, 814073, 796829, 736398, 900826, 741569, 813861, 788369, 699600, 479374, 707898, 857087, 815163, 897533, 490330, 676425, 422461, 846932, 857860, 832287, 884117, 631007, 589078, 567159, 603432, 636022 }, // A
    //     { 777627, 566742, 455760, 585510, 904778, 513938, 613313, 551837, 761977, 497757, 496479, 709159, 534513, 586196, 692349, 448749, 201821, 733462, 696908, 665727, 745626, 500928, 572613, 196748, 497496, 540710 }, // B
    //     { 639470, 469604, 478356, 567519, 641395, 400968, 396361, 956682, 567258, 275114, 761165, 563847, 443642, 408262, 660573, 404478, 301372, 542887, 539392, 512206, 533574, 397361, 400681, 187510, 394527, 414007 }, // C
    //     { 869388, 658952, 556195, 732676, 954903, 643796, 648079, 637725, 876848, 545451, 628713, 669237, 652745, 643902, 726667, 635552, 486556, 723051, 729192, 669721, 755724, 636470, 663480, 280373, 525881, 611698 }, // D
    //     { 794468, 834762, 793766, 834116, 777830, 797294, 833736, 848495, 943814, 627477, 771549, 870848, 847761, 992329, 668097, 733691, 534822, 1000000, 913042, 853289, 829528, 744365, 773572, 653522, 551680, 735569 }, // E
    //     { 775704, 592863, 542422, 720388, 797841, 728581, 643528, 570420, 733041, 507957, 548159, 685007, 605588, 593724, 732198, 575508, 287566, 752531, 665169, 769153, 792556, 543838, 569812, 325837, 343749, 563245 }, // F
    //     { 779078, 631468, 451025, 708584, 920639, 612285, 640288, 630280, 755968, 490286, 616500, 718737, 634707, 661945, 637054, 525428, 279907, 756405, 763964, 770546, 733842, 645096, 619364, 219225, 476882, 620891 }, // G
    //     { 862816, 661066, 482502, 745934, 884484, 630760, 646198, 629361, 779036, 532405, 641381, 777832, 742654, 766667, 767830, 555333, 337879, 829860, 739639, 834397, 739517, 633799, 719686, 173123, 507825, 627675 }, // H
    //     { 712112, 696745, 876239, 760088, 922084, 680889, 821359, 714292, 588591, 531371, 717294, 796529, 799943, 932820, 766462, 639064, 436183, 780013, 867853, 877370, 624190, 699579, 585670, 499103, 341852, 675620 }, // I
    //     { 742890, 251490, 243696, 270417, 692209, 206401, 221448, 348002, 422935, 196269, 328101, 249218, 308740, 278650, 603179, 331132,  20001, 299074, 324653, 219647, 667750, 277501, 235838,  30559, 103954, 156091 }, // J
    //     { 778465, 551793, 440606, 577622, 790952, 554655, 582218, 554763, 690191, 371392, 542734, 726545, 548164, 600503, 792600, 506502, 306922, 716439, 660686, 773508, 737251, 525637, 567381, 170315, 448582, 544030 }, // K
    //     { 838385, 703133, 600101, 752304, 868945, 676104, 686855, 601282, 854761, 486971, 644706, 841260, 658594, 661116, 738682, 588483, 353149, 579201, 780952, 800671, 752839, 631943, 615809, 242572, 583770, 631132 }, // L
    //     { 827980, 706498, 539812, 703094, 844747, 668446, 663389, 630557, 836771, 617245, 642624, 637455, 782438, 641362, 741333, 711729, 404326, 625044, 743132, 708702, 747750, 656059, 653923, 333242, 449381, 615044 }, // M
    //     { 857925, 782867, 680515, 931161, 905887, 774508, 882520, 755111, 845428, 674564, 801143, 730866, 772285, 831964, 765487, 716330, 529084, 708212, 867018, 858046, 807613, 753660, 785627, 376195, 518798, 790747 }, // N
    //     { 624141, 715479, 753636, 714931, 842480, 706935, 694698, 699480, 582759, 559553, 638508, 798487, 761887, 858806, 616833, 700978, 312146, 836899, 758194, 722234, 645652, 621737, 661692, 496755, 478661, 681482 }, // O
    //     { 749009, 434854, 469908, 575361, 738569, 680950, 438335, 615568, 727016, 319718, 482524, 693641, 469201, 412581, 722400, 669311, 182595, 790116, 583068, 651504, 665239, 443752, 425443, 197224, 379876, 455728 }, // P
    //     { 321589, 194224, 328556, 183285, 208304, 204963, 232257, 151321, 335839,      0, 152542, 245797, 254882, 164654, 164801, 146972,  94370, 161654, 278333, 194912, 641310, 218016, 225898,  32327,  34054, 165966 }, // Q
    //     { 872927, 794831, 717186, 860048, 900403, 770517, 800489, 761895, 848581, 672139, 792185, 767277, 777589, 809096, 820016, 714290, 478128, 736190, 850213, 846613, 828888, 739103, 765865, 380070, 538966, 756974 }, // R
    //     { 822843, 742931, 873615, 767171, 886042, 705123, 748535, 726908, 854909, 626724, 722322, 714765, 726355, 686650, 799094, 795872, 471862, 680969, 881732, 908332, 751825, 717405, 731757, 363267, 586967, 704174 }, // S
    //     { 852685, 712713, 572808, 800617, 943536, 688130, 721584, 743002, 848218, 605095, 665677, 735083, 725953, 707312, 765090, 645466, 398549, 805778, 835295, 792868, 800838, 704687, 773387, 368747, 548607, 799100 }, // T
    //     { 663090, 687564, 778458, 677780, 918864, 812528, 713101, 662421, 592514, 438689, 651662, 709191, 790503, 902196, 537047, 663551, 265326, 822415, 841124, 790577, 560582, 609214, 584222, 464725, 375036, 584501 }, // U
    //     { 638365, 453286, 348461, 472298, 824032, 490423, 455508, 414827, 715956, 323259, 410033, 400558, 426515, 383275, 823000, 421347, 138482, 434295, 488513, 401835, 446704, 404780, 482349, 188156, 279813, 396924 }, // V
    //     { 799874, 433610, 398448, 457814, 838498, 433480, 419952, 455710, 820315, 449847, 435166, 435535, 510486, 479987, 741829, 426787, 102948, 468587, 539647, 412810, 712349, 387621, 488148, 207235, 453104, 365366 }, // W
    //     { 496801, 422333, 372761, 457712, 522562, 427088, 413256, 402382, 547756, 231842, 433476, 385389, 419207, 382104, 384083, 566629, 127935, 342566, 473548, 531044, 464196, 415437, 387963, 397297, 311212, 389403 }, // X
    //     { 548740, 482744, 486355, 487231, 588069, 407851, 440799, 433129, 473732, 306466, 442851, 484946, 550134, 499402, 523018, 521949, 154253, 459292, 624622, 477862, 452986, 414584, 447193, 216276, 254137, 385133 }, // Y
    //     { 675889, 575025, 401521, 586244, 809478, 529852, 548817, 507297, 734082, 367971, 536599, 596396, 545677, 502678, 606005, 482719, 216276, 462571, 571182, 704012, 826072, 558518, 706228, 171799, 450969, 534116 }  // Z
    // };

    //english
    vector<vector<int>> bigram = {
        {527027, 625439, 668519, 657329, 481936, 599397, 625670, 542546, 653549, 485828, 593091, 714317, 661633, 750694, 476808, 623893, 424448, 720534, 713621, 728439, 590038, 621992, 576737, 469196, 641896, 478304},
        {626068, 471732, 425458, 376195, 673578, 338020, 300535, 381394, 583131, 417879, 276000, 611271, 394465, 358708, 621137, 363645, 180036, 586693, 514966, 442994, 620698, 366172, 375526, 143696, 594195, 203518},
        {674995, 421094, 561125, 432239, 674609, 414590, 391158, 675604, 623127, 302023, 613526, 599192, 418588, 393269, 692744, 436231, 382577, 597370, 513752, 643782, 586470, 351522, 412200, 177655, 502420, 322118},
        {667427, 603534, 574596, 577993, 693402, 578483, 548165, 586230, 680061, 480694, 455381, 561611, 570677, 557294, 649736, 563446, 418030, 599390, 635872, 660810, 601056, 507149, 590318, 276933, 542350, 353920},
        {721911, 631731, 690532, 726368, 670488, 650341, 621974, 616424, 661826, 508041, 547405, 683890, 669325, 729330, 651568, 653762, 517145, 756751, 738551, 705224, 572840, 636701, 656918, 598831, 616178, 448024},
        {622493, 487058, 521504, 476684, 623719, 603324, 467050, 519024, 644313, 415092, 405147, 558355, 507767, 456363, 671863, 505230, 310148, 622359, 537514, 652331, 563328, 409175, 494579, 255774, 479979, 284723},
        {640390, 504446, 510052, 486486, 655464, 517304, 517428, 632603, 612665, 389593, 384940, 551407, 504146, 547775, 621257, 505998, 324004, 611695, 576763, 614713, 574371, 392860, 521397, 239605, 492991, 279312},
        {710668, 495063, 516297, 482876, 772851, 483277, 443181, 511452, 694433, 393863, 400050, 503681, 512488, 513854, 674381, 492919, 355862, 575555, 548654, 622447, 555815, 396244, 514689, 198840, 516522, 295158},
        {633342, 551912, 679485, 648698, 646837, 599797, 630425, 464429, 464076, 402510, 551602, 668427, 636532, 764489, 678754, 567235, 419779, 642718, 712939, 713883, 460968, 627826, 489321, 486456, 354118, 531902},
        {526732, 255983, 270808, 263377, 518207, 230164, 227141, 260718, 432094, 244725, 236195, 227770, 264565, 238257, 554704, 290859, 57225, 341991, 298734, 259106, 559060, 209140, 244717, 59282, 182294, 140366},
        {557134, 447029, 441817, 416882, 637138, 456699, 399728, 468207, 600570, 339182, 365530, 484142, 450585, 533121, 528307, 435073, 235926, 453190, 565007, 516419, 453142, 336256, 474346, 175130, 458467, 222814},
        {684115, 548695, 545274, 634795, 700467, 554285, 489609, 508855, 684408, 402298, 503407, 687802, 542308, 477030, 660180, 550632, 339443, 518923, 624746, 610184, 583772, 507135, 530956, 242358, 652533, 321489},
        {680490, 579785, 500076, 450023, 693865, 473964, 418417, 473606, 645189, 372916, 361444, 449696, 573760, 459021, 648951, 618591, 261854, 469177, 576797, 561710, 574169, 373832, 490332, 237407, 534542, 252423},
        {685070, 571654, 658683, 725778, 694073, 590851, 714877, 576682, 666972, 512027, 561458, 573149, 574826, 593601, 671768, 559948, 402038, 546951, 679027, 731402, 573794, 541706, 581150, 337611, 582948, 414325},
        {607806, 604572, 617122, 616831, 552326, 700780, 580388, 565516, 595391, 469220, 568112, 652465, 678342, 738387, 634341, 636043, 367464, 725161, 651889, 675470, 701900, 614729, 656235, 468205, 534036, 405055},
        {644689, 434049, 438914, 415826, 660091, 441551, 400265, 556970, 597859, 309559, 343872, 632184, 489918, 371727, 643928, 589905, 253524, 650062, 546532, 575073, 575792, 310907, 455915, 192835, 438282, 214151},
        {336539, 276699, 219911, 207444, 185351, 208136, 133858, 228384, 336423, 94675, 119470, 213563, 228590, 157683, 212234, 185771, 132236, 184897, 260391, 247761, 580480, 163774, 291120, 60720, 168530, 0},
        {696909, 567192, 611557, 627136, 742498, 568796, 587017, 559960, 694739, 454503, 584974, 589029, 614959, 612337, 698131, 571410, 382342, 601415, 678831, 679450, 595322, 554059, 567224, 297693, 625528, 362731},
        {699861, 597799, 637983, 575543, 702710, 603209, 537406, 664575, 690492, 473057, 545114, 591030, 598093, 580314, 685976, 636682, 480768, 570144, 671837, 735231, 633517, 486643, 624730, 314408, 542247, 341515},
        {691397, 575120, 593787, 545751, 720452, 567592, 519917, 781920, 721292, 459138, 464394, 596139, 574233, 529130, 725675, 561996, 383175, 661045, 671859, 673263, 623351, 472515, 626359, 278549, 619916, 417321},
        {586286, 560410, 599818, 569898, 590576, 472838, 589394, 428932, 569586, 347509, 454119, 634369, 583590, 658775, 468189, 595054, 267334, 666589, 660578, 658375, 327245, 400527, 431270, 377487, 456091, 381098},
        {579633, 280731, 323265, 345731, 698317, 278407, 272764, 282788, 629463, 224095, 224291, 312060, 291735, 288289, 543302, 326797, 100914, 352912, 398216, 327119, 343736, 264540, 307687, 147022, 406240, 135391},
        {664811, 438080, 445767, 443607, 650034, 428372, 375397, 643599, 658677, 354774, 379193, 468917, 453031, 572435, 627676, 425715, 245323, 506570, 535757, 510133, 390923, 328089, 470443, 170114, 458505, 316574},
        {488136, 351405, 472502, 324358, 468564, 362517, 298677, 385953, 495699, 219696, 234813, 323837, 369790, 291233, 400276, 531084, 178963, 348782, 381338, 519119, 378610, 284589, 365789, 291783, 351590, 121207},
        {613815, 554157, 563119, 539685, 607298, 544679, 497118, 544312, 584566, 435558, 437639, 536518, 549971, 518138, 627556, 551526, 347362, 536757, 616268, 609263, 472287, 440578, 567782, 247871, 427787, 340324},
        {489782, 314024, 301307, 287967, 526630, 279616, 274587, 359564, 467641, 195887, 269556, 341665, 308249, 269504, 442390, 283159, 182820, 287559, 352013, 321110, 362787, 237783, 332581, 131359, 358563, 403099}
    };

    public:
        vigenere_crack() {};

        void printKeyAndText(string cipher_text, int key_len) {
            auto [a, b] = findPlaintext(cipher_text, key_len);
            cout << "key is: \"" << b << "\"\n";
            cout << "plaintext is: \"" << a << "\"\n";
        }

        tuple<string, string> findPlaintext(string cipher_text, int key_len) {
            vector<int> cipher_int;
            for(char c: cipher_text) {
                if(isalpha(c)) {
                    int num = tolower(c) - 'a';
                    cipher_int.push_back(num);
                }
            }

            vector<int> key = findKey(cipher_int, key_len);
            string plaintext = "";

            int idx = 0;
            int key_idx = 0;
            for(char c: cipher_text) {
                if(isalpha(c)) {
                    int letter = (cipher_int[idx] - key[key_idx] + 26) % 26;
                    idx++;
                    key_idx = (key_idx + 1) % key_len;
                    if(iscapital(c)) plaintext += char(letter + 'A');
                    else plaintext += char(letter + 'a');
                } else {
                    plaintext += c;
                }
            }  

            string key_string = "";
            for(int i: key) {
                key_string += char(i + 'a');
            }

            return make_tuple(plaintext, key_string);
        }


    private:        
        vector<int> findKey(vector<int> cipher_text, int key_len) {
            vector<int> key;

            int prev_best_score = 0;
            int prev_best_key_ch2 = 0;
            int best_score = 0;
            int best_key_ch1_0 = 0;
            int best_key_ch2_0 = 0;
            int best_key_ch2 = 0;
            int best_fitness;

            for (int key_idx = 0; key_idx < key_len; key_idx++) {
                int best_key_ch1 = 0;
                best_key_ch2 = 0;
                best_fitness = 0;
                for (int key_ch1 = 0; key_ch1 < 26; key_ch1++) {
                    for (int key_ch2 = 0; key_ch2 < 26; key_ch2++) {
                        int fitness = 0;

                        for (int text_idx = key_idx; text_idx < (cipher_text.size() - 1); text_idx += key_len) {
                            int clear_ch1 = (cipher_text[text_idx] - key_ch1 + 26) % 26;
                            int clear_ch2 = (cipher_text[text_idx + 1] - key_ch2 + 26) % 26;
                            fitness += bigram[clear_ch1][clear_ch2];
                        } 
                        
                        if (fitness > best_fitness) {
                            // cout << fitness << " : " << key_ch1 << " : " << key_ch2 << '\n';
                            best_fitness = fitness;
                            best_key_ch1 = key_ch1;
                            best_key_ch2 = key_ch2;
                        }
                    }
                }
                // cout << best_key_ch1 << " " << best_key_ch2 << " " << best_fitness << '\n';

                if (key_idx == 0) {
                    best_score = best_fitness;
                    best_key_ch1_0 = best_key_ch1;
                    best_key_ch2_0 = best_key_ch2;
                    key.push_back(0);
                }
                else {
                    int tmp = (prev_best_score > best_fitness) ? prev_best_key_ch2 : best_key_ch1;
                    key.push_back(tmp);
                }
                prev_best_score = best_fitness;
                prev_best_key_ch2 = best_key_ch2;
            }
            key[0] = (best_fitness > best_score) ? best_key_ch2 : best_key_ch1_0 ;

            return key;
        }

        int iscapital(char x) {
            if (x >='A' && x <= 'Z') return 1;
            else return 0;
        }
};

int main() {
    string cipher_text = "ecye kg ed hiz nqi wcqk fwgfq pts vjuh m aqh mcf w ytcb m aqh au vvucig fd fc uc vvuh ecggus";
    int key_len = 4;
    vigenere_crack instance;
    instance.printKeyAndText(cipher_text, key_len);
}
